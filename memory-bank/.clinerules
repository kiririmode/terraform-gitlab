# Cline Rules: GitLab Infrastructure Project

## プロジェクトパターン

### ディレクトリ構造
- `modules/`: 再利用可能なTerraformモジュールを格納
- `envs/`: 環境固有の設定を格納
- `memory-bank/`: プロジェクトドキュメントを格納

### ファイル命名規則
- Terraformファイル: スネークケース（例: `nat_gateway.tf`）
- ドキュメント: キャメルケース（例: `systemPatterns.md`）
- 変数名: スネークケース（例: `vpc_cidr`）

### コーディング規則
1. Terraform
   - リソース名はスネークケース
   - 変数名はスネークケース
   - タグは必須（`Name`, `Environment`）

2. ドキュメント
   - Markdownフォーマット
   - 日本語で記述
   - セクション区切りは明確に

## 重要な実装パス
1. VPCモジュール
   ```
   modules/vpc/main.tf -> public_subnet.tf -> private_subnet.tf -> nat_gateway.tf
   ```

2. GitLabモジュール
   ```
   modules/gitlab/main.tf -> IAM -> EC2 -> EBS
   ```

## 学習した知見
1. VPC設定
   - パブリック/プライベートサブネットの分離が重要
   - NATゲートウェイは1つで十分

2. GitLab設定
   - EC2インスタンスタイプは慎重に選択
   - バックアップ戦略は早期に計画

3. セキュリティ
   - 最小権限の原則を厳守
   - セキュリティグループは細かく設定

## 既知の課題と対応
1. パフォーマンス
   - 問題: インスタンスサイズの最適化が必要
   - 対応: 負荷テストを実施して適切なサイズを決定

2. セキュリティ
   - 問題: IAM権限の最適化が必要
   - 対応: 必要最小限の権限を特定し設定

3. 運用性
   - 問題: バックアップ戦略が未実装
   - 対応: EBSスナップショット機能を実装予定

## ツール使用パターン
1. Terraform
   - `terraform init`: モジュール初期化時
   - `terraform plan`: 変更確認時
   - `terraform apply`: 変更適用時

2. AWS CLI
   - リソース状態の確認
   - トラブルシューティング時

3. Git
   - 機能ごとにブランチを作成
   - プルリクエストでレビュー
